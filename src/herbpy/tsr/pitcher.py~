import numpy
from prpy.tsr.base import *
from prpy.tsr.tsr import *

@TSRFactory'herb', 'pitcher', 'grasp')
def pitcher_grasp(self, robot, pitcher, manip=None):
    '''
    @param pitcher The pitcher to pour
    @param manip The arm that will execute the pour
    '''
    
    if manip is None:
        manip = robot.GetActiveManipulator()

    T0_w = pitcher.GetTransform()
    Tw_e = numpy.array([[0.802, 0., -0.596, 0.199], 
                        [-0.5961, 0., -0.8028, 0.2684], 
                        [0., 1., 0., 0.1841], 
                        [0., 0., 0., 1.]])
    Bw = numpy.zeros((6,2))
    Bw[2,:] = [-0.01, 0.01]  # Allow a little vertical movement
    
    grasp_tsr = TSR(T0_w = T0_w, Tw_e = Tw_e, Bw = Bw, manip = self.get_manip_idx(manip))
    grasp_chain = TSRChain(sample_start=False, sample_goal = True, constrain=False, TSR = grasp_tsr)

    return [grasp_chain]
        

@TSRFactoryMethod('herb', 'pitcher', 'pour')
def pitcher_pour(self, pitcher, manip, min_tilt, max_tilt):
    '''
    @param pitcher The pitcher to pour
    @param manip The arm that will execute the pour
    @param min_tilt The minimum amount to tilt the pitcher in the pouring motion
    @param max_tilt The maximum amount to tilt the pitcher in the pouring motion
    '''
    
    pitcher_in_world = pitcher.GetTransform()
    
    # spout in pitcher
    spout_in_pitcher = numpy.array([[-0.7956, 0.6057, 0., -0.0662],
                                    [-0.6057, -0.7956, 0., -0.0504],
                                    [0., 0., 1., 0.2376], 
                                    [0., 0., 0., 1.]])
    
    # end-effector relative to spout
    ee_in_world = manip.GetEndEffectorTransform()
    ee_in_pitcher = numpy.dot(numpy.linalg.inv(pitcher_in_world), ee_in_world)
    ee_in_spout = numpy.dot(numpy.linalg.inv(spout_in_pitcher), ee_in_pitcher)
    Bw_pour = numpy.zeros((6,2))
    Bw_pour[4,:] = [ -0.2, 1.57 ]
    
    manip_idx = self.get_manip_idx(manip)
    
    tsr_0 = TSR(T0_w = pitcher_in_world,
                Tw_e = spout_in_pitcher,
                Bw = numpy.zeros((6,2)),
                manip = manip_idx)

    tsr_1_constraint = TSR(Tw_e = ee_in_spout,
                           Bw = Bw_pour,
                           manip = manip_idx)

pour_chain = TSRChain(sample_start = False,
                              sample_goal = False,
                              constrain = True,
                              TSRs = [tsr_0, tsr_1_constraint])

        Bw_goal = numpy.zeros((6,2))
        Bw_goal[4,:] = [ min_tilt, max_tilt ]
        tsr_1_goal = TSR(Tw_e = ee_in_spout,
                         Bw = Bw_goal,
                         manip = manip_idx)
        pour_goal = TSRChain(sample_start = False,
                             sample_goal = True,
                             constrain = False,
                             TSRs = [tsr_0, tsr_1_goal])

        return [pour_chain, pour_goal]
                    
